syntax = "proto3";
package shelld.daemon;
import "google/protobuf/empty.proto";

option go_package = "github.com/raphaelreyna/shelld/rpc/daemon";

service ShellclientDaemon {
    rpc PreRunQuery(PreRunQueryRequest) returns (PreRunQueryResponse);
    rpc PostRunReport(PostRunReportRequest) returns (google.protobuf.Empty);
}

message PreRunReportResponse {
    string cmd_key = 1;
}

message PreRunQueryRequest {
    string command = 1;
    string tty = 2;
    int64 timestamp = 3;
}

message PreRunQueryResponse {
    string uuid = 1;
}

message PostRunReportRequest {
    string uuid = 1;
    int32 exit_code = 2;
}

service MetashellDaemon {
    rpc NewExitCodeStream(google.protobuf.Empty) returns (stream CommandExitCode);
    rpc RegisterCommandEntry(CommandEntry) returns (CommandKey);
    rpc Metacommand(MetacommandRequest) returns (MetacommandResponse);
    rpc GetPluginInfo(GetPluginInfoRequest) returns (GetPluginInfoResponse);
}

message CommandEntry {
    string command = 1;
    string tty = 2;
    int64 timestamp = 3;
}

message CommandKey {
    string key = 1;
}

message CommandExitCode {
    string key = 1;
    int32 exit_code = 2;
}

message GetPluginInfoRequest {
    string plugin_name = 1;
    string metacommand_name = 2;
    bool metacommand_plugins_only = 3;
}

message GetPluginInfoResponse {
    repeated PluginInfo plugins = 1;
}

message PluginInfo {
    string name = 1;
    string version  = 2;
    bool accepts_command_reports = 3;
    repeated MetacommandInfo metacommands = 4;
}

message MetacommandInfo {
    string name = 1;
    CommandResponseFormat format = 3;
}

message MetacommandRequest {
    string plugin_name = 1;
    string meta_command = 2;
    repeated string args = 3;
    repeated string format_args = 4;
}

message MetacommandResponse {
    string out = 1;
    string error = 2;
}

enum CommandResponseFormat {
    UNSPECIFIED = 0;
    TEXT = 1;
    SCREEN = 2;
    SHELL = 3;
}