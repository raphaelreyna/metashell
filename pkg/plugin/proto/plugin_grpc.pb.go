// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandReportHandlerClient is the client API for CommandReportHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandReportHandlerClient interface {
	ReportCommand(ctx context.Context, in *CommandReport, opts ...grpc.CallOption) (*Empty, error)
}

type commandReportHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandReportHandlerClient(cc grpc.ClientConnInterface) CommandReportHandlerClient {
	return &commandReportHandlerClient{cc}
}

func (c *commandReportHandlerClient) ReportCommand(ctx context.Context, in *CommandReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.CommandReportHandler/ReportCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandReportHandlerServer is the server API for CommandReportHandler service.
// All implementations must embed UnimplementedCommandReportHandlerServer
// for forward compatibility
type CommandReportHandlerServer interface {
	ReportCommand(context.Context, *CommandReport) (*Empty, error)
	mustEmbedUnimplementedCommandReportHandlerServer()
}

// UnimplementedCommandReportHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCommandReportHandlerServer struct {
}

func (UnimplementedCommandReportHandlerServer) ReportCommand(context.Context, *CommandReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCommand not implemented")
}
func (UnimplementedCommandReportHandlerServer) mustEmbedUnimplementedCommandReportHandlerServer() {}

// UnsafeCommandReportHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandReportHandlerServer will
// result in compilation errors.
type UnsafeCommandReportHandlerServer interface {
	mustEmbedUnimplementedCommandReportHandlerServer()
}

func RegisterCommandReportHandlerServer(s grpc.ServiceRegistrar, srv CommandReportHandlerServer) {
	s.RegisterService(&CommandReportHandler_ServiceDesc, srv)
}

func _CommandReportHandler_ReportCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandReportHandlerServer).ReportCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CommandReportHandler/ReportCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandReportHandlerServer).ReportCommand(ctx, req.(*CommandReport))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandReportHandler_ServiceDesc is the grpc.ServiceDesc for CommandReportHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandReportHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommandReportHandler",
	HandlerType: (*CommandReportHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportCommand",
			Handler:    _CommandReportHandler_ReportCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
